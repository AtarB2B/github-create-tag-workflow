name: Create Git Tag

description: Create Git Tag

inputs:
  DEPLOY_ENV:
    required: true
    description: Set Enviroment to deploy
  GITHUB_TOKEN:
    required: true
    description: Github Token
  SVC_NAME:
    required: true
    description: Service Name
  CREATE_RELEASE:
    required: true
    description: Create Release and Tag - Github
  SSH_PRIV_KEY_LIBRARY:
    required: true
    description: SSH_PRIV_KEY_LIBRARY

runs:
  using: "composite"
  steps:
    - name: Git checkout
      uses: actions/checkout@v3

    - name: Update Library
      run: |
        echo "${{ inputs.SSH_PRIV_KEY_LIBRARY }}" > ssh-rsa.key
        chmod 400 ssh-rsa.key
        mkdir /root/.ssh && touch /root/.ssh/known_hosts
        eval $(ssh-agent) && ssh-add ssh-rsa.key
        ssh-keyscan -H github.com >> /root/.ssh/known_hosts
        chmod +x ./update_library.sh && ./update_library.sh -b main
        cat ./library/requirements.txt >> requirements.txt
      shell: bash

    - name: Check Credentials and Project
      id: project_credential
      run: |
        if [[ (${{ inputs.DEPLOY_ENV }} == 'dev') ]]
        then
            echo '::set-output name=PROJECT::$ATAR_PROJECT_DEV'
            echo '::set-output name=CREDENTIALS::$ATAR_CREDENTIALS_DEV'
        else
            echo '::set-output name=PROJECT::$ATAR_PROJECT'
            echo '::set-output name=CREDENTIALS::$ATAR_CREDENTIALS'
        fi
      shell: bash

    - name: "call action"
      id: last_release
      uses: InsonusK/get-latest-release@v1.0.1
      with:
        myToken: ${{ inputs.GITHUB_TOKEN }}
        exclude_types: "release"
        view_top: 1
    
    - name: "Print result"
      run: |
        echo "id: ${{ steps.last_release.outputs.id }}"
        echo "name: ${{ steps.last_release.outputs.name }}"
        echo "tag_name: ${{ steps.last_release.outputs.tag_name }}"
        echo "created_at: ${{ steps.last_release.outputs.created_atd }}"
        echo "draft: ${{ steps.last_release.outputs.draft }}"
        echo "prerelease: ${{ steps.last_release.outputs.prerelease }}"
      shell: bash

    - name: Get latest release
      id: latest_release
      uses: kaliber5/action-get-release@v1
      with:
        token: ${{ inputs.GITHUB_TOKEN }}
        latest: false

    - name: Set Vars
      run: |
        chown -R $(id -u):$(id -g) $PWD
        git config --global --add safe.directory "*"
        echo "CURRENT_DATE=$(date +'%Y-%m-%d %H:%M')" >> $GITHUB_ENV
        echo "BRANCH=${{steps.latest_release.outputs.tag_name}}" >> $GITHUB_ENV
      shell: bash

    - name: GAE Key
      run: |
        echo ${{steps.project_credential.outputs.CREDENTIALS}}|gcloud auth activate-service-account --key-file=-
      shell: bash

    # - uses: jungwinter/split@v2
    #   id: split
    #   with:
    #     msg: '${{env.BRANCH}}'
    #     separator: '/'

    - name: Check Promote and GAE Deploy ${{github.event.repository.name}}
      run: |
        if [[ (${{ inputs.DEPLOY_ENV }} == 'dev') ]]
        then
            OLD_TAG=${{env.BRANCH}} 
            TAG="${OLD_TAG//./-}"
            retry -l -i=60s -c=3 gcloud -q --project=${{steps.project_credential.outputs.PROJECT}} app deploy app.${{ inputs.DEPLOY_ENV }}.yaml -v=$TAG --promote
        elif [[ (${{ inputs.DEPLOY_ENV }} == 'prod-atar') ]]
        then
            OLD_TAG=${{env.BRANCH}} 
            TAG="${OLD_TAG//./-}"
            ${RETRY} gcloud -q --project=${{steps.project_credential.outputs.PROJECT}} app deploy app.${{ inputs.DEPLOY_ENV }}.yaml -v=$TAG --promote
        fi
      shell: bash

    - name: Create TAR release
      if: ${{ inputs.CREATE_RELEASE == 'true' }}
      run: |
        atar-cli --tar -n=${{github.event.repository.name}}-${{env.BRANCH}}
      shell: bash

    - name: Create GH Release
      if: ${{ inputs.CREATE_RELEASE == 'true' }}
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: ${{env.BRANCH}}
        release_name: Release ${{env.BRANCH}}
        # commitish: ${{env.BRANCH}}
        body: |
          Changes in this Release
          - Release from: ${{env.BRANCH}}
          - Release date: ${{env.CURRENT_DATE}}
          - Commit: ${{github.sha}}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      if: ${{ inputs.CREATE_RELEASE == 'true' }}
      run: |
        chown -R $(id -u):$(id -g) $PWD
        ${RETRY} gh release upload ${{env.BRANCH}} ${{github.event.repository.name}}-${{env.BRANCH}}.tar.gz
      shell: bash

    # - name: Delete RC Branch
    #   if: ${{ inputs.CREATE_RELEASE == 'true' }}
    #   run: |
    #     chown -R $(id -u):$(id -g) $PWD
    #     git push origin --delete "${{env.BRANCH}}"
    #   shell: bash