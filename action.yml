name: Create Git Tag

description: Create Git Tag

inputs:
  DEPLOY_ENV:
    required: true
    description: Set Enviroment to deploy
  GITHUB_TOKEN:
    required: true
    description: Github Token
  SVC_NAME:
    required: true
    description: Service Name
  CREATE_RELEASE:
    required: true
    description: Create Release and Tag - Github
  SSH_PRIV_KEY_LIBRARY:
    required: true
    description: SSH_PRIV_KEY_LIBRARY

runs:
  using: "composite"
  steps:
    - name: Git checkout
      uses: actions/checkout@v3

    # - name: Find Latest Release Branch
    #   id: release-branch-finder
    #   uses: jsryudev/release-branch-finder@v0.1.0
    #   with:
    #     repo-token: ${{ inputs.GITHUB_TOKEN }}
    #     release-branch-prefix: rc
    
    # criar if para validar nome da branch, if branch = main buscar ultima tag
    - name: Get latest release
      id: latest_release
      if: ${{ startsWith(github.ref, 'refs/heads/main') }}
      uses: kaliber5/action-get-release@v1
      with:
        token: ${{ inputs.GITHUB_TOKEN }}
        latest: true

    - name: Set Vars
      run: |
        echo "CURRENT_DATE=$(date +'%Y-%m-%d %H:%M')" >> $GITHUB_ENV
        echo "BRANCH="$(echo ${{ steps.latest_release.outputs.tag_name }})"" >> $GITHUB_ENV

        if [[ (${GITHUB_REF_NAME} != 'main') ]]
        then
            echo "BRANCH="$(echo ${GITHUB_REF_NAME} | cut -c 4-)"" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Check Credentials and Project
      id: project_credential
      run: |
        if [[ (${{ inputs.DEPLOY_ENV }} == 'dev') ]]
        then
            echo '::set-output name=PROJECT::$ATAR_PROJECT_DEV'
            echo '::set-output name=CREDENTIALS::$ATAR_CREDENTIALS_DEV'
        else
            echo '::set-output name=PROJECT::$ATAR_PROJECT'
            echo '::set-output name=CREDENTIALS::$ATAR_CREDENTIALS'
        fi
      shell: bash
    
    - name: Permissions
      run: chown -R $(id -u):$(id -g) $PWD
      shell: bash

    - name: Upgrade wheel, setuptools, virtualenv
      run: python2 --version; python2 -m pip install --upgrade pip wheel setuptools virtualenv
      shell: bash

    - name: Get SSH_KEY LIBS-BACKEND
      run: echo "${{inputs.SSH_PRIV_KEY_LIBRARY}}" > ssh-rsa.key ; atar-cli deploy --set-ssh=ssh-rsa.key ; rm -f ssh-rsa.key
      shell: bash

    - name: Update Client/Update Third Party
      run: atar-cli --update-all
      shell: bash

    - name: GAE Key
      if: ${{ inputs.CREATE_RELEASE == 'true' }}
      run: |
        OLD_TAG=${{env.BRANCH}} 
        TAG="${OLD_TAG//./-}"
        echo ${{steps.project_credential.outputs.CREDENTIALS}}|gcloud auth activate-service-account --key-file=-
        ${RETRY} gcloud -q --project=${{steps.project_credential.outputs.PROJECT}} app deploy app.yaml -v=$TAG --no-promote
      shell: bash

    - name: GAE Key
      if: ${{ inputs.CREATE_RELEASE == 'false' }}
      run: |
        OLD_TAG=${{ steps.latest_release.outputs.tag_name }}
        TAG="${OLD_TAG//./-}"
        echo ${{steps.project_credential.outputs.CREDENTIALS}}|gcloud auth activate-service-account --key-file=-
        ${RETRY} gcloud -q --project=${{steps.project_credential.outputs.PROJECT}} app deploy app.yaml -v=$TAG --no-promote
      shell: bash

    - name: Create TAR release
      if: ${{ inputs.CREATE_RELEASE == 'true' }}
      run: |
        atar-cli --tar -n=${{github.event.repository.name}}-${{env.BRANCH}}
      shell: bash

    - name: Create GH Release
      if: ${{ inputs.CREATE_RELEASE == 'true' }}
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: ${{env.BRANCH}}
        release_name: Release ${{env.BRANCH}}
        commitish: rc/${{env.BRANCH}}
        body: |
          Changes in this Release
          - Release from: rc/${{env.BRANCH}}
          - Release date: ${{env.CURRENT_DATE}}
          - Commit: ${{github.sha}}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      if: ${{ inputs.CREATE_RELEASE == 'true' }}
      run: |
        chown -R $(id -u):$(id -g) $PWD
        ${RETRY} gh release upload ${{env.BRANCH}} ${{github.event.repository.name}}-${{env.BRANCH}}.tar.gz
      shell: bash

    - name: Create PR to main
      if: ${{ inputs.CREATE_RELEASE == 'true' }}
      run: gh pr create --base=main --head=rc/${{env.BRANCH}} --title="[Release] version ${{env.BRANCH}} to production" --body="Pull Request ${{env.BRANCH}} to Production"
      shell: bash

    - name: Delete RC Branch
      if: ${{ inputs.CREATE_RELEASE == 'false' }}
      run: |
        chown -R $(id -u):$(id -g) $PWD
        git push origin --delete "${{env.BRANCH}}"
      shell: bash