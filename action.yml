name: Create Git Tag

description: Create Git Tag

inputs:
  DEPLOY_ENV:
    required: true
    description: Set Enviroment to deploy
  GITHUB_TOKEN:
    required: true
    description: Github Token
  SVC_NAME:
    required: true
    description: Service Name
  CREATE_RELEASE:
    required: true
    description: Create Release and Tag - Github
  CLIENT:
    required: true
    description: Clients

runs:
  using: "composite"
  steps:
    - name: Git checkout
      uses: actions/checkout@v3

    - name: "PRERELEASE"
      if: ${{ inputs.CREATE_RELEASE == 'true' }}
      id: last_prerelease
      uses: InsonusK/get-latest-release@v1.0.1
      with:
        myToken: ${{env.GITHUB_TOKEN}}
        exclude_types: "draft|release"
        view_top: 1000
    
    - name: "Set tag prerelease"
      if: ${{ inputs.CREATE_RELEASE == 'true' }}
      run: |
        echo "BRANCH=${{ steps.last_prerelease.outputs.tag_name }}" >> $GITHUB_ENV
      shell: bash

    - name: "RELEASE"
      if: ${{ inputs.CREATE_RELEASE == 'false' }}
      id: last_release
      uses: InsonusK/get-latest-release@v1.0.1
      with:
        myToken: ${{env.GITHUB_TOKEN}}
        exclude_types: "draft|prerelease"
        view_top: 1000

    - name: "Set tag release"
      if: ${{ inputs.CREATE_RELEASE == 'false' }}
      run: |
        echo "BRANCH=${{ steps.last_release.outputs.tag_name }}" >> $GITHUB_ENV
      shell: bash

    - name: Check Credentials and Project
      id: project_credential
      run: |
        if [[ (${{ inputs.DEPLOY_ENV }} == 'dev') ]]
        then
            echo '::set-output name=PROJECT::$ATAR_PROJECT_DEV'
            echo '::set-output name=CREDENTIALS::$ATAR_CREDENTIALS_DEV'
        else
            echo '::set-output name=PROJECT::$ATAR_PROJECT'
            echo '::set-output name=CREDENTIALS::$ATAR_CREDENTIALS'
        fi
      shell: bash

    - name: Set Vars
      run: |
        echo "CURRENT_DATE=$(date +'%Y-%m-%d %H:%M')" >> $GITHUB_ENV
      shell: bash

    - name: GAE Key
      run: |
        echo ${{steps.project_credential.outputs.CREDENTIALS}}|gcloud auth activate-service-account --key-file=-
      shell: bash

    - name: Build FRONTEND
      run: |
        if [[ (${{ inputs.DEPLOY_ENV }} == 'dev') ]]
        then
            cd erp; rm -rf node_modules dist; sudo npm install; npm run build-staging
        elif [[ (${{ inputs.DEPLOY_ENV }} == 'prod-atar') ]]
        then
            cd erp; rm -rf node_modules dist; sudo npm install; npm run build
        elif [[ (${{ inputs.DEPLOY_ENV }} == 'prod-porto') ]]
        then
            cd erp; rm -rf node_modules dist; sudo npm install; npm run build-porto
        fi
        
      shell: bash

    - name: Check Promote and GAE Deploy ${{github.event.repository.name}}
      run: |
        if [[ (${{ inputs.DEPLOY_ENV }} == 'dev') ]]
        then
            OLD_TAG=${{env.BRANCH}} 
            TAG="${OLD_TAG//./-}"
            cd erp
            ${RETRY} gcloud -q --project=${{steps.project_credential.outputs.PROJECT}} app deploy app.porto-hml.yaml -v=$TAG --no-promote
            ${RETRY} gcloud -q --project=${{steps.project_credential.outputs.PROJECT}} app deploy app.atar-hml.yaml -v=$TAG --no-promote

        elif [[ (${{ inputs.DEPLOY_ENV }} == 'prod-atar') ]]
        then
            OLD_TAG=${{env.BRANCH}} 
            TAG="${OLD_TAG//./-}"
            cd erp
            ${RETRY} gcloud -q --project=${{steps.project_credential.outputs.PROJECT}} app deploy app.yaml -v=$TAG --promote
        
        elif [[ (${{ inputs.DEPLOY_ENV }} == 'prod-porto') ]]
        then
            OLD_TAG=${{env.BRANCH}} 
            TAG="${OLD_TAG//./-}"
            cd erp
            ${RETRY} gcloud -q --project=${{steps.project_credential.outputs.PROJECT}} app deploy app.porto.yaml -v=$TAG --promote
        fi
      shell: bash

    - name: Create TAR release
      if: ${{ inputs.CREATE_RELEASE == 'true' }}
      run: |
        atar-cli --tar -n=${{github.event.repository.name}}-${{env.BRANCH}}
      shell: bash

    # - name: Create GH Release
    #   if: ${{ inputs.CREATE_RELEASE == 'true' }}
    #   id: create_release
    #   uses: actions/create-release@v1
    #   with:
    #     tag_name: ${{env.BRANCH}}
    #     release_name: Release "${{env.BRANCH}}
    #     commitish: ${{ steps.release-branch-finder.outputs.release-branch }}
    #     body: |
    #       Changes in this Release
    #       - Release from: ${{ steps.release-branch-finder.outputs.release-branch }}
    #       - Release date: ${{env.CURRENT_DATE}}
    #       - Commit: ${{github.sha}}
    #     draft: false
    #     prerelease: false

    - name: Update GH Release
      if: ${{ inputs.CREATE_RELEASE == 'true' }}
      run: |
        chown -R $(id -u):$(id -g) $PWD
        ${RETRY} gh release edit ${{env.BRANCH}} --draft=false
        ${RETRY} gh release edit ${{env.BRANCH}} --prerelease=false
        ${RETRY} gh release edit ${{env.BRANCH}} --latest=true
      shell: bash

    - name: Upload Release Asset
      if: ${{ inputs.CREATE_RELEASE == 'true' }}
      run: |
        chown -R $(id -u):$(id -g) $PWD
        ${RETRY} gh release upload ${{env.BRANCH}} ${{github.event.repository.name}}-${{env.BRANCH}}.tar.gz
      shell: bash

    # - name: Create PR to main
    #   if: ${{ inputs.CREATE_RELEASE == 'true' }}
    #   run: gh pr create --base=main --head=${{ steps.release-branch-finder.outputs.release-branch }} --title="[Release] version ${{ steps.release-branch-finder.outputs.release-branch }} to production" --body="Pull Request ${{ steps.release-branch-finder.outputs.release-branch }} to Production"
    #   shell: bash
    
    # - name: Delete RC Branch
    #   if: ${{ inputs.CREATE_RELEASE == 'false' }}
    #   run: |
    #     chown -R $(id -u):$(id -g) $PWD
    #     git push origin --delete "${{ steps.release-branch-finder.outputs.release-branch }}"
    #   shell: bash